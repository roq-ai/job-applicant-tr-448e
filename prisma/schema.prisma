generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model candidate {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  first_name     String           @db.VarChar(255)
  last_name      String           @db.VarChar(255)
  email          String           @unique @db.VarChar(255)
  phone          String?          @db.VarChar(255)
  status         String           @db.VarChar(255)
  job_posting_id String           @db.Uuid
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  job_posting    job_posting      @relation(fields: [job_posting_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  note           note[]
  recommendation recommendation[]
}

model company {
  id          String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description String?       @db.VarChar(255)
  image       String?       @db.VarChar(255)
  name        String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  user_id     String        @db.Uuid
  tenant_id   String        @db.VarChar(255)
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  job_posting job_posting[]
}

model job_posting {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title          String           @db.VarChar(255)
  description    String           @db.VarChar(255)
  company_id     String           @db.Uuid
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  candidate      candidate[]
  company        company          @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  recommendation recommendation[]
}

model note {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content      String    @db.VarChar(255)
  rating       Int?
  candidate_id String    @db.Uuid
  user_id      String    @db.Uuid
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  candidate    candidate @relation(fields: [candidate_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user         user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model recommendation {
  id             String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  candidate_id   String      @db.Uuid
  user_id        String      @db.Uuid
  job_posting_id String      @db.Uuid
  created_at     DateTime    @default(now()) @db.Timestamp(6)
  updated_at     DateTime    @default(now()) @db.Timestamp(6)
  candidate      candidate   @relation(fields: [candidate_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  job_posting    job_posting @relation(fields: [job_posting_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String           @unique @db.VarChar(255)
  firstName      String?          @db.VarChar(255)
  lastName       String?          @db.VarChar(255)
  roq_user_id    String           @db.VarChar(255)
  tenant_id      String           @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  company        company[]
  note           note[]
  recommendation recommendation[]
}
